// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A REGISTER
    
    Not (in = instruction[0], out = notinstruct0);

    // Output a if sel == 0, b if sel == 1

    Mux16 (a = instruction, b = prevALUOut, sel = instruction[10], out = AIn); 
    Register (in = AIn, load = notinstruct0, out = AOut, out = addressM); // if load == 1 then in, else stay the same
    Mux16 (a = AOut, b = inM, sel = instruction[3], out = ALUIn); // use A if sel == 0, M if sel == 1

    // D REGISTER

    Register (in = prevALUOut, sel = instruction[11], out = DOut);

    // ALU

    ALU (x = DOut, y = ALUIn, zx = instruction[4] , nx = instruction[5] , zy = instruction[6] ,
        ny = instruction[7], f = instruction[8], no = instruction[9], out= outM , out = ALUOut, zr= zr, ng= ng); 

    // M Register

    And (a = instruction[12], b = true, out = writeM); // set writeM to true if dest field specifies to output to M register

    // Jump

    // if (out == 0) set zr = 1
    // if (out < 0) set ng = 1

    // Check if out == 0 exactly
    Or8Way (in = ALUOut[0..7], out = Or0);
    Or8Way (in = ALUOut[8..15], out = Or1);
    Or (a = Or0, b = Or1, out = zerocheck); // if ZeroCheck = 0, then ALUOut == 0, otherwise not

    // Determine if out > 0 (check value of j3)
    Not (in = ng, out = notng);
    And (a = notng, b = zr, out = notngzr);
    And (a = notngzr, b = zerocheck, out = j3);


    // Check if conditions are met
    Xor (a = instruction[13], b = ng, out = xorj1);
    Xor (a = instruction[14], b = zr, out = xorj2);
    Xor (a = instruction[15], b = j3, out = xorj3);

    And (a = xorj1, b = xorj2, out = xorj12);
    And (a = xorj12, b = xorj3, out = jmpcond);

    // PC

    Or (a = reset, b = jumpcond, out = notinc);
    Not (in = notinc, out = incflag);

    PC (in = AOut, reset = reset, load = jumpcond, inc = incflag, out = pc);


}