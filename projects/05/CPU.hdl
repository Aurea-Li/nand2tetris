// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A REGISTER
    
    Not (in = instruction[15], out = notinstruct0);

    // Output a if sel == 0, b if sel == 1

    // if instruct0 = 1 and instruct5 = 1, then feed ALU output to A register
    And (a = instruction[15], b = instruction[5], out = AMuxSel);

    Or (a = AMuxSel, b = notinstruct0, out = ARegLoad);

    Mux16 (a = instruction, b = ALUOut, sel = AMuxSel, out = AIn); 
    ARegister (in = AIn, load = ARegLoad, out = AOut, out[0..14] = addressM); // if load == 1 then in, else stay the same
    Mux16 (a = AOut, b = inM, sel = instruction[12], out = ALUIn); // use A if sel == 0, M if sel == 1

    // D REGISTER

    And (a = instruction[15], b = instruction[4], out = DloadSel);
    DRegister (in = ALUOut, load = DloadSel, out = DOut);

    // ALU

      ALU (x = DOut, y = ALUIn, zx = instruction[11] , nx = instruction[10] , zy = instruction[9] ,
        ny = instruction[8], f = instruction[7], no = instruction[6], out= outM , out = ALUOut, 
        out[0..7] = ALUOut0, out[8..15] = ALUOut1, zr = zr, ng = ng); 



    // M Register

    And (a = instruction[15], b = instruction[3], out = MMuxSel);
    And (a = MMuxSel, b = true, out = writeM); // set writeM to true if dest field specifies to output to M register

    // Jump

    // Determine value of j3
    Not (in = zr, out = notzr);
    Not (in = ng, out = notng);

    And (a = notzr, b = notng, out = j3); //j3 = 1 if zr = 0 and ng = 0, o/w j3 = 1

    And (a = instruction[2], b = ng, out = andj1);
    And (a = instruction[1], b = zr, out = andj2);
    And (a = instruction[0], b = j3, out = andj3);

    Or (a = andj1, b = andj2, out = andj1j2);
    Or (a = andj1j2, b = andj3, out = andj); 
    And (a = andj, b = instruction[15], out = jmpcond); // if jumpcond == 1, then jump

    // PC

    Or (a = reset, b = jmpcond, out = notinc);
    Not (in = notinc, out = incflag);

    PC (in = AOut, reset = reset, load = jmpcond, inc = incflag, out[0..14] = pc); 


}